View的分发
disptachTouchEvent：用来进行事件的分发，如果事件能够传递给当前View，那么此方法一定被调用，返回结果受当前的
View的onTouchEvent,表示是否消耗当前事件
onInterceptTouchEvent：内部调用，用来判断是否拦截某个事件，如果当前的ViEW拦截某个事件，则同一个
事件序列中，此方法不会再次被调用，返回结果表示是否拦截当前事件
onTouchEvent：在dispatchTouchEvenet方法中调用，用来处理点击事件，返回结果表示是否消耗当前事件，如果不消耗，
则在同一个事件序列中，当前View无法再次接收到事件

public boolean dispatchTouchEvent(MotionEvent ev){
    bool consume = false;
    if （onInterceptTouchEvent(ev)){
        consume = onTouchEvent(ev);
    }else{
        consume = child.dispatchTouchEvent(ev);
    }
    return consume;
}

对于根ViewGroup来说，点击事件产生后，首先会传递给它，这时候它的dispachTouchEvent就会被调用，如果这个ViewGroup
的onInterceptTouchEvent方法返回true就表示它要拦截当前事件，接着事件就会交给这个ViewGroup处理，即它的
onTouchEvent方法就会被调用。如果这个ViewGroup的onInterceptTouchEvent方法返回false就表示它不拦截当前事件，，
这时候当前事件就会继续传递给它的子元素，接着子元素的disptchTouchEvent方法就会被调用，
当一个View需要处理事件时候，如果它设置了OnTouchListener,那么OnTouchListener中的onTouch方法会被回调，这时候
事件如何去处理还是看OnTouch的返回值，如果返回false,则当前View的onTouchEvent就会被调用。如果返回true,那么
onTouchEvent就不会被调用，由此可见，给View设置的OnTouchListener优先级比onTouchEvent要高，如果当前设置有
onClickListener，那么它的onClick方法就会被调用。---> onClickListener其优先级最低，即处于事件传递的尾端

当点击事件产生后，传递过程如下，Activity -> Window -> View
即事件总是传递给Activity，Activity再传递给Window,最后Window再传递给顶级View，顶级View接收到事件后，就会
按照事件分发机制去分发事件，考虑一种情况，
如果一个View的onTouchEvent返回false,那么父容器的onTouchEvent就会被调用，依次类推，如果所有的元素都不处理
这个事件，那么这个时间将会传递给Activity处理，即Activity的onTouchEvent就会被调用，


2一个事件序列号只能被一个View拦截且消耗，这一条原因可以参考3，因为一旦一个元素拦截了某此事件，那么同一个事件
序列内得所有事件都会直接交给它处理，因此同一个事件序列中事件不能分别由两个ViEW同时处理，但是通过特殊手段
可以做到，比如一个View将本该自己处理的事件通过OnTouchEvent强行传递给其他View处理

3某个View一旦决定了拦截，那么这一个事件序列都只能由他处理（如果事件序列号能够传递给它的话），并且它的
onInterceptTouchEvent不会再被调用，就说说当一个View决定拦截一个事件后，那么系统就会把同一个事件序列内得其他
方法都直接交给它来处理，因此就不用调用这个View的OnInterceptTouchEvent去询问是否要拦截了

4某个View一旦开始处理事件，如果它不消耗ACTION_DOWN事件(onTouchEvent返回了false),那么同一个事件序列中的其他
事件不会交给它处理，并且把事件讲重新交给它的父元素去处理，即父元素的onTouchEvent会被调用，意思就是事件一旦
交给一个View处理，那么它就必须消耗掉，否则同一个事件序列中剩下的事件就不再交给它来处理了，

5如果View不消耗ACTION_DOWN以外的其他事件，那么这个点击事件会消失，此时父元素的onTouchEvent并不会被调用，并且
当前的View可以持续收到后续的事件，最终这些消失的点击事件会传递给activity去处理

6ViewGroup默认不拦截任何事件，onInterceptTouchEvent默认返回false

7View没有onInterceptTouchEvent方法，一旦有点击事件给他，那么onTouchEvent就会被调用

8View的onTouchEvent默认消耗事件，返回true,除非他是不可点击(clickable和longClickable同时为false).view的
longClickable属性默认都为false，clickable属性要分情况，比如Button的clickable的属性默认为true,而TextView
默认为false

9View的enable不影响onTouchEvent的默认返回值，那怕一个View是disable状态的，只要它的clickable或者longClickable
有一个为true,那么它的onTouchEvent就返回true

10.onClick会发生的前提是当前的view是可点击的，并且它收到了down和up的事件

11.事件传递过程是由外向内，即事件总是先传递给父元素，然后再由父元素分发给子View，通过requestDisallowInterceptTouchEvent
方法可以在子元素干预父元素的事件分发过程，但是ACTION_DOWN除外


事件分发的源码解析
    点击事件用MotionEvent来表示，当一个点击操作发生时，最先传递给当前Activity,由Activity的dispatchTouchEvent
来进行事件派发，具体工作由Activity内部的Window来完成，Window会将事件传递给decor view ，decor view一般就是
当前界面的底层容器(即setContentView所设置的View的父容器)，通过Activity.getWindow.getDecorView()获取


dispatchTouchEvent :
    事件开始交给Activity所附属的Window进行分发，如果返回true,整个事件循环就结束了，
返回false意味着事件没人处理，所有的ViEW的onTouchEvent都返回false,那么Activity的
onTouchEvent就会被调用

Window ---> superDispatchTouchEvent
       ---> PhoneWindow

getWindow().getDecorView()
mDecor就是getWindow().getDecorView()返回的view,而通过setContentView设置的View是它
的一个子View，目前事件都传递给View，换句话来说，事件肯定传递到View,顶级View，即在Activity
中setContentView所设置的View,另外顶级View也叫根View。一般都是ViewGroup

点击事件事件达到顶级View(一般是一个ViewGroup)以后，会调用ViewGroup的dispatchTouchEvent
方法 -->  如果顶级ViewGroup拦截事件即onInterceptTouchEvent返回true,则事件由ViewGroup
处理。这时如果ViewGroup的mOnTouchListener被设置，则onTouch会被调用，否则onTouchEvent被
被调用。---->如果都提供的话，onTouch就会被屏蔽掉onTouchEvent。在onTouchEvent中，如果
设置了mOnClickListener，则onClick会被调用

如果顶级ViewGroup不拦截事件，则事件会传递给它所在的点击事件链上的子View,这时候子
View，这时候子View的dispatchTouchEvent就会被调用，到此为止，事件就从顶级View到下一层
的View



FLAG_DISALLOW_INTERCEPT标记位，这个标记位是通过requestDisallowInterceptTouchEvent
方法来设置的，一旦设置后，ViewGroup就无法拦截除了ACTION_DOWN以外的其他点击事件，

onInterceptTouchEvent不是每次事件都会被调用的，如果想提前处理所有的点击事件，要选择
dispatchTouchEvent方法，只有这个方法能确保每次都会被调用，前提是事件能够传递到当前的
ViewGroup，
FLAG_DISALLOW_INTERCEPT标记位

只要View的CLICKABLE和LONG_CLICKABLE有一个为true,那么就会消耗这个事件，即onTouchEvent
方法返回true,不管他是disable状态，



滑动冲突：l
ViewPager + Fragment


VelocityTracker

HorizontalScrollViewEx
StickyLayout



自定义View：
    构造方法
    onAttach
    onVisibilityChanged
    onDetach
    测量流程、布局流程、绘制流程

    ViewRoot
    DecorView
    measure  layout  draw
    ViewRoot ViewRootImpl类，连接WindowManager和DecorView纽带，View的三大流程都是通过
ViewRoot来完成。在ActivityThread中，当Activity对象被创建完毕后，会讲DecorView添加到
Window中，同时会创建ViewRootImpl对象，并将ViewRootImpl对象和DecorView建立关联
    View的绘制流程是从ViewRoot的performTraversals方法开始的，它经过measure、layout、
和draw三个过程才能把一个View绘制出来，其中
    measure：用来测量View的宽和高
    layout：用来确定View在父容器中的防止位置，
    draw：把View绘制在屏幕上
    performTraversals会一次调用performMeasure、performLayout和performDraw三个方法，
    performMeasure中会调用measure方法，在measure方法中会调用onMeasure方法，onMeasure
方法则会对所有的子元素进行measure过程，这时候measure流程就从父容器传递到子元素中，完成
一次的measure过程，接着子元素会重复父元素的measure过程，如此反复完成整个View树的遍历
    performLayout：
    performDraw：dispatchDraw实现

    measure过程决定了View的宽、高，measure完成后，可以通过getMeasuredWidth和
getMeasureHeight方法获取到View测量后的宽、高，几乎等于View的宽和高
    Layout过程决定了View的四个顶点的坐标和实际的View的宽、高，完成以后，可以通过getTop、
getBottom、getLeft、getRight来拿到View的四个顶点的位置，并可以通过getWidth和getHeight
方法来拿到View的最终宽、高
    Draw决定了View的显示，只有draw方法完成以后View的内容才能显示屏幕上

    DecorView作为顶级的View,一般情况下它的内部会包含一个竖直方向的LinearLayout，
    titlebar
    content(android.R.id.content)  ---> FrameLayout
    View层的事件都是先经过DecorView，然后才传递给我们的View

    MeasureSpec：决定了一个View的尺寸规格，还受父容器的影响，会将View的LayoutParams
根据父容器所施加的规则换成对应的MeasureSpec ---->  View的宽、高。不一定等于View的
最终的宽、高
    int 32位  高2位是SpecMode,低30位是SpecSize
    SpecMode 3种形式，
        UNSPECIFIED
        EXACTLY ： match_parent  具体数值
        AT_MOST：wrap_content
    系统内部是通过MeasureSpec进行View的测量，但是正常情况下使用View指定的MeasureSpec,
但是还是可以给View设置LayoutParams,
    在View测量时候，系统会将LayoutParams在父容器约束下转换为对应的MeasureSpec,然后
根据这个MeasureSpec来确定View测量后的宽和高，MeasureSpec不是唯一由LayoutParams决定
的，是需要和父容器一起决定的
    MeasureSpec = LayoutParams + 父容器的MeasureSpec
    对于顶级的View（DecorView）其MeasureSpec用窗口的尺寸和自身的LayoutParams确定
    对于普通的View,MeasureSpec由父容器的MeasureSpec和自身的LayoutParams
    MeasureSpec一旦确定了，onMeasure中就可以确定了View测量的宽和高

    当View采用了固定的高/宽时候，不管父容器的MeasureSpec是什么，View的MeasureSpec都是
精确模式并且大小遵循LayoutParams中的大小
    当View的宽/高是match_parent时，如果父容器是最大模式，那么View也是最大模式并且其
大小不会超过父容器的剩余空间。
    当View的宽/高是wrap_content时候，不管父容器模式是精确还是最大化，View的模式总是最大化
并且大小不会超过父容器的剩余空间


measure过程：final方法
    原始的View：
    ViewGroup：
    measure方法会调用onMeasure方法，
    onMeasure(int widthMeasureSpec, int heightMeasureSpec){
        setMeasuredDimension(
            getDefaultSize(getSuggestedMinimumWidth(),widthMeasureSpec),
            getDefaultSize(getSuggestedMinimumHeight(),heightMeasureSpec)
           );
    }
    View的最终大小是在layout阶段确定的

直接继承View的自定义控件需要重写onMeasure方法并设置wrap_content时的自身大小，否则布局
中使用wrap_content就相当于match_parent

SharpeDrawable无原始宽和高
BitmapDrawable有原始宽和高
    View的宽/高由specSize决定的：直接继承View的自定义控件需要重写onMeasure方法，并设置
wrap_content时候等于自身大小，否则在布局中使用wrap_content相当于match_parent
    如果View在布局中使用了warp_content，那么specMode就是AT_MOST模式，在这种模式下，它
的寛、高都等于specSize,specSize = parentSize,而parentSize是容器中目前可以使用的大小,
那就是父容器当前剩余的空间大小。

    getMeasuredWidth /getMeasuredHeight 方法就可以正确地获取到View的高或者宽，但是在
某些极端情况下拿到的测量宽/高很可能不准确，在onLayout方法中获取View的测量宽/高或者最终的
宽/高
    View的measure过程和Activity的生命周期不是同步执行，因此无法保证Activity执行了onCreate、
onStart、onResume时某个View已经侧量完毕。如果没有测量完毕，则获取的宽、高就是0
    (1)Activity/View #onWindowFoucusChanged
        View已经初始化完毕，宽、高已经准备好了，----> onWindowFocusChanged均被调用多次，
  如果频繁进行onResume和onPause，那么onWindowFocusChanged就会频繁被调用

   （2）view.post(runnable)

   （3）ViewTreeObserver
        使用ViewTreeObserver的众多的回调可以完成此功能，比如使用OnGlobalLayoutListener
 这个接口，当View树状态发生了改变或者View树内部的View可见性发生改变时，onGlobalLayout方法
 就会被回调，伴随着View树的状态改变，onGlobalLayout就会被调用多次。
    （4）view.measure(int widthMeasureSpec,int heightMeasureSpec)


layout过程：ViewGroup用来确定子元素的位置，当ViewGroup的位置被确定后，它在onLayout中
会遍历所有的子元素并调用其layout方法。在layout方法中onLayout方法又会被调用
    layout方法确定View本身的位置，而onLayout方法会确定所有子元素的位置

draw过程：作用就是将View绘制到屏幕上面
            1.绘制背景background.draw(canvas)
            2.绘制自己(onDraw)
            3.绘制children(dispatchDraw)
            4.绘制装饰(onDrawScrollBars)
View的绘制过程是通过dispatchDraw来实现的，dispatchDraw会遍历所有子元素的draw方法，
如此draw事件就一层层地传递下去
    #setWillNotDraw
        如果一个View不需要绘制任何内容，那么设置这个标记为true后，系统会进行相应的优化，
默认情况下，View没有启动这个优化标记位，但是ViewGroup会默认启动这个优化标记位。
        当我们自定义控件继承于ViewGroup并且本身不具备绘制的功能时，就可以开启这个标记
位从而便于系统进行后续的优化。当明确知道一个ViewGroup需要通过onDraw来绘制内容是，需要
显示关闭Will_Not_Draw这个标记位

自定义View的分类：
    1.继承View重写onDraw方法
    2.继承ViewGroup派生特殊的layout
    3.继承特定的View（TextView）
    4.继承特定的ViewGroup(LinearLayout)

1.让View支持wrap_content
    直接继承View或者ViewGroup的控件，如果不在onMeasure中对wrap_content做特殊处理，那么
当外界在布局中使用wrap_content时就无法达到预期效果
2.如果有必要，让View支持padding
    如果不在draw方法中处理padding,那么padding属性无法起作用。
    直接继承自ViewGroup控件需要在onMeasure和onLayout中考虑padding和子元素的margin
对其造成的影响，不然将导致padding和子元素的margin失效
3.尽量不要再view中使用Handler,没有必要
    View内部本身就提供post系列的方法
4.View中如果有线程或者动画，需要及时停止，参考View#onDetachedFromWindow
     当包含此View的Activity退出或者当前View被remove时，View的onDetachedFromWindow
方法就会被调用，和此方法对应的是onAttachedToWindow，当包含此View的Activity启动时，
View的onAttachedToWindow方法被调用。
    同时，当View变得不可见时，也需要停止线程和动画，不及时--->  会造成内存泄露
5.View带有滑动嵌套的情形时候，需要处理好滑动的冲突


使用自定义属性，必须在布局文件中添加schemas声明：xmlns:app="http://schemas.android.com/apk/res-auto"
这个声明中，app是自定义属性的前缀，可以换成其他名字，但是CircleView中的自定义属性前缀
必须和这里的一致，


Drawable:常常被作为View的背景使用，一般是通过xml来定义
    Drawable是一个抽象类，它是所有的Drawable对象的基类，每个具体的Drawable都是子类，
比如ShapeDrawable、BitmapDrawable
    Drawable内部的宽、高比较重要，getIntrinsicWidth和getIntrinsicHeight两个方法能
获取到他们，但是并不是所有的Drawable都有内部的宽和高。
    一般来说，Drawable并没有大小概念，当做View的背景时，Drawable会拉伸至View的同等大小

1.BitmapDrawable:
2.ShapeDrawable：
    android:shape:表示图形的形状，有四个选项，rectangle(矩形)、oval（椭圆）、
line（横线）、ring（圆环）
        默认值是矩形，另外line和ring两个选项必须通过<stroke>标签来指定线的宽度和颜色
    等信息，否则将无法达到预期的显示效果
        <corners>：表示shape的4个角度的角度，只适用于矩形的shape,
            android：radius --- 4个角度同事设定相同角度
                android:topLeftRadius:
                android：topRightRadius:
                android:bottomLeftRadius:
                android:bottomRightRadius:

        <gradient>：和<solid>标签互相排斥，solid表示纯色填充，而gradient




3.

